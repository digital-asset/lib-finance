-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module DA.Finance.Instrument.Equity where

import DA.Next.Set as Set
import DA.Record

import DA.Finance.Asset.Lifecycle
import DA.Finance.Instrument.Entitlement
import DA.Finance.Types
import DA.Finance.Utils

-- | The outputs of the EquityCashDividendLifecycle_Process choice.
data EquityCashDividendLifecycle_Process_Result = EquityCashDividendLifecycle_Process_Result
  with
    entitlementCid : ContractId Entitlement
      -- ^ Entitlement instrument describing the upcoming dividend payment.
    lifecycleEffectsCid : ContractId LifecycleEffects
      -- ^ Lifecycle Effects describing the increase of the asset's version
      -- number and the creation of a separate dividend entitlement.
  deriving (Eq, Show)

-- | Reference data describing an equity cash dividend. Can be used to
-- lifecycle asset deposits, trades or dependent instruments.
template EquityCashDividend
  with
    id : Id
      -- ^ The asset id to which the dividend applies. Depending on the trust model
      -- the signatories might be the issuer or a third party reference data provider
      -- such as Reuters.
    exDate : Date
      -- ^ The date on or after which a security is traded without the dividend.
    settlementDate : Date
      -- ^ The date on which the dividend gets paid.
    perShare : Asset
      -- ^ The id and amount of the distributed assets per unit of equity.
    observers : Set Party
  where
    signatory id.signatories
    observer observers
    ensure exDate <= settlementDate && perShare.quantity > 0.0

    key id : Id
    maintainer key.signatories

    controller id.signatories can
      EquityCashDividend_SetObservers : ContractId EquityCashDividend
        with newObservers : Set Party
        do create this with observers = newObservers

      nonconsuming EquityCashDividendLifecycle_Process : EquityCashDividendLifecycle_Process_Result
        -- ^ Allows the id.signatories to create an entitlement instrument and 
        -- lifecycle effects.
        with
          entitlementIdLabel : Text
            -- ^ A label for the entitlement instrument describing the dividend payment.
        do
          assertOnOrAfterDateMsg "expects exDate <= now" $ exDate
          let entitlementId = Id with signatories = id.signatories, label = entitlementIdLabel, version = 0

          entitlementCid <-
            create Entitlement with
              id = entitlementId
              settlementDate
              underlyingId = perShare.id
              observers

          lifecycleEffectsCid <-
            create LifecycleEffects with
              id
              effects =
                [ Asset with id = increaseVersion id, quantity = 1.0
                , Asset with id = entitlementId, quantity = perShare.quantity
                ]
              observers

          return EquityCashDividendLifecycle_Process_Result with entitlementCid, lifecycleEffectsCid

-- | Reference data describing an equity stock split. Can be used to
-- lifecycle asset deposits, trades or dependent instruments.
template EquityStockSplit
  with
    id : Id
      -- ^ The asset id to which the stock split applies. Depending on the trust model
      -- the signatories might be the issuer or a third party reference data provider
      -- such as Reuters.
    exDate : Date
      -- ^ The date on or after which the security is traded with the split applied.
    rFactor : Decimal
      -- ^ The factor through which the quantity has to be divided to obtain the new quantity.
    observers : Set Party
  where
    signatory id.signatories
    observer observers
    ensure rFactor > 0.0

    key id : Id
    maintainer key.signatories

    controller id.signatories can
      EquityStockSplit_SetObservers : ContractId EquityStockSplit
        with newObservers : Set Party
        do create this with observers = newObservers

      nonconsuming EquityStockSplitLifecycle_Process : ContractId LifecycleEffects
        -- ^ Allows the id.signatories to create lifecycle effects.
        do
          assertOnOrAfterDateMsg "expects exDate <= now" $ exDate

          create LifecycleEffects with
            id
            effects = [ Asset with id = increaseVersion id, quantity = 1.0 / rFactor ]
            observers

-- | HIDE
increaseVersion : Id -> Id
increaseVersion id = id with version = id.version + 1
