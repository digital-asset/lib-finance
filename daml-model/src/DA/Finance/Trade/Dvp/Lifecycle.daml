daml 1.2
module DA.Finance.Trade.Dvp.Lifecycle where

import DA.Assert

import DA.Finance.Asset.Lifecycle
import DA.Finance.Trade.Dvp
import DA.Finance.Types
import DA.Finance.Utils

-- | Rule that allows to lifecycle a Dvp trade under the specified master agreement
-- according to the provided lifecycle effects.
template DvpLifecycleRule
  with
    masterAgreement : MasterAgreement
      -- ^ The master agreement for which the rule can be used.
  where
    signatory masterAgreement.id.signatories

    key masterAgreement.id : Id
    maintainer key.signatories

    nonconsuming choice DvpLifecycle_Process: ContractId Dvp
      with
        dvpCid : ContractId Dvp
          -- ^ Dvp trade to be lifecycled.
        lifecycleEffectsCid : ContractId LifecycleEffects
          -- ^ Asset lifecycle effects.
        ctrl : Party
      controller ctrl
      do
        dvp <- fetchAndArchive dvpCid
        lifecycleEffects <- fetch lifecycleEffectsCid
        dvp.masterAgreement === masterAgreement

        let work asset =
              if asset.id == lifecycleEffects.id
              then map (\effect -> effect with quantity = asset.quantity * effect.quantity) lifecycleEffects.effects
              else [asset]

        create dvp with
          tradeId = dvp.tradeId with version = dvp.tradeId.version + 1
          payments = concatMap work dvp.payments
          deliveries = concatMap work dvp.deliveries
