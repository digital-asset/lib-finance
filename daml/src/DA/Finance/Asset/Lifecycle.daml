daml 1.2
module DA.Finance.Asset.Lifecycle where

import DA.Assert
import DA.Next.Set

import DA.Finance.Asset
import DA.Finance.Types
import DA.Finance.Utils

-- | Rule that allows to lifecycle deposits in a specified account. 
template AssetLifecycle
  with
    account : Account
      -- ^ The account for which the rule can be used.
    observers : Set Party
  where
    signatory account.id.signatories
    observer observers

    key account.id : Id
    maintainer key.signatories

    let setQty (qty: Decimal) (ad: AssetDeposit) =
          ad with asset = ad.asset with quantity = qty

    controller account.owner can
      nonconsuming AssetLifecycle_Process : [ContractId AssetDeposit]
        -- ^ Allows the owner to lifecycle an asset deposit according to its lifecycle
        -- effects published by the deposit.asset.id.signatories.
        with
          lifecycleEffectsCid : ContractId LifecycleEffects
            -- ^ Asset lifecycle effects.
          depositCid : ContractId AssetDeposit
            -- ^ The asset deposit that will be consumed.
        do
          deposit <- fetchAndArchive depositCid
          effects <- fetch lifecycleEffectsCid
          deposit.asset.id === effects.id
          mapA (\factor -> create $ setQty (factor.quantity * deposit.asset.quantity) $ deposit with asset = factor) effects.factors

-- | Describes the lifecycle effects of one asset by n other assets and the corresponding
-- scaling factors. Can be used to process corporate actions such as an equity cash
-- dividend that increases the asset's version number and creates a separate entitlement.
template LifecycleEffects
  with
    id : Id
      -- ^ The id of the asset to be decomposed.
    factors : [Asset]
      -- ^ The ids and amounts of assets to be created when lifecycling one unit
      -- of the specified asset id.
    observers : Set Party
  where
    signatory id.signatories
    observer observers
    ensure all (\a -> a.quantity > 0.0) factors

    key id : Id
    maintainer key.signatories
